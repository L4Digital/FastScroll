/*
 * Copyright 2016 L4 Digital LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

def libraryName = 'FastScroll'
def libraryArtifact = 'fastscroll'
def libraryGroup = 'com.l4digital.fastscroll'
def libraryVersion = '1.1.1'

repositories {
    google()
}

android {
    compileSdkVersion rootProject.ext.sdkVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.ext.sdkVersion

        versionCode 1
        versionName libraryVersion

        consumerProguardFiles 'proguard-rules.pro'
    }
}

dependencies {
    api 'com.android.support.constraint:constraint-layout:1.1.0'
    api "com.android.support:design:$supportLibVersion"
    api "com.android.support:recyclerview-v7:$supportLibVersion"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task generateArchives(dependsOn: ['sourcesJar', 'javadocJar'])

publishing {
    publications {
        aar(MavenPublication) {
            groupId = libraryGroup
            version = libraryVersion
            artifactId = libraryArtifact

            artifact("$buildDir/outputs/aar/$artifactId-release.aar")

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')

                configurations.getByName("api").allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')

                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)

                    if (it.excludeRules.size() > 0) {
                        def exclusions = dependency.appendNode('exclusions')

                        it.excludeRules.each { ExcludeRule rule ->
                            def exclusion = exclusions.appendNode('exclusion')

                            exclusion.appendNode('groupId', rule.group)

                            if (rule.module != null) {
                                exclusion.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }

        java(MavenPublication) {
            groupId = libraryGroup
            version = libraryVersion
            artifactId = libraryArtifact

            artifact sourcesJar
            artifact javadocJar
        }
    }
}
